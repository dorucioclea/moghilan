server.forward-headers-strategy: framework

server:
  shutdown: graceful
  ssl:
    protocol: SASL_SSl
  error:
    include-exception: true
    include-message: always
    whitelabel:
      enabled: false
    include-binding-errors: always
  reactive:
    session:
      timeout: 1800
  port: 10004

eureka:
  client:
    service-url:
      default-zone: ${EUREKA_URI:http://localhost:8761/_discovery_server}
    instance:
      prefer-ip-address: true

spring:
  cloud:
    stream:
      instance-count: 2
      bindings:
        account-service-in-0:
          binder: account-broker
          destination: accounts
          content-type: application/json
          group: account-group
          consumer:
            auto-startup: true
            batch-mode: true
            partitioned: true
            header-mode: headers
            instance-count: 4
            instance-index: 3
            concurrency: 8
        account-service-out-0:
          binder: account-broker
          destination: accounts
          content-type: application/json
          group: account-group
          producer:
            header-mode: headers
            auto-startup: true
            partitioned: true
            partition-count: 4
            partition-key-expression: headers['partitionKey']
            required-groups: account-group, customer-group, payment-group
            error-channel-enabled: true
        customer-service-in-0:
          binder: customer-broker
          destination: customers
          content-type: application/json
          group: customer-group
          consumer:
            auto-startup: true
            batch-mode: true
            partitioned: true
            header-mode: headers
            instance-count: 4
            instance-index: 3
            concurrency: 8
        customer-service-out-0:
          binder: customer-broker
          destination: customers
          content-type: application/json
          group: customer-group
          producer:
            header-mode: headers
            auto-startup: true
            partitioned: true
            partition-count: 4
            partition-key-expression: headers['partitionKey']
            required-groups: account-group, customer-group, payment-group
            error-channel-enabled: true
        payment-service-in-0:
          binder: payment-broker
          destination: payments
          content-type: application/json
          group: payment-group
          consumer:
            auto-startup: true
            batch-mode: true
            partitioned: true
            header-mode: headers
            instance-count: 4
            instance-index: 3
            concurrency: 2 
        payment-service-out-0:
          binder: payment-broker
          destination: payments
          content-type: application/json
          group: payment-group
          producer:
            header-mode: headers
            auto-startup: true
            partitioned: true
            partition-count: 4
            partition-key-expression: headers['partitionKey']
            required-groups: account-group, customer-group, payment-group
            error-channel-enabled: true
      binders:
        account-broker:
          type: kafka
          environment:
            spring:
              kafka:
                host: localhost:9092, localhost:9093, localhost:9094, localhost:9095 
        customer-broker:
          type: kafka
          environment:
            spring:
              kafka:
                host: localhost:9092, localhost:9093, localhost:9094, localhost:9095  
        payment-broker:
          type: kafka
          environment:
            spring:
              kafka:
                host: localhost:9092, localhost:9093, localhost:9094, localhost:9095

# spring.cloud.stream.bindings.func-out-0.producer.partitionKeyExtractorName=customPartitionKeyExtractor

spring.cloud.stream.kafka.binder:
  brokers: 
  - localhost:9092

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
spring.config.activate.on-profile: docker

server.port: 5050

app:
  auth-server: localhost
  eureka-server: localhost
  config-server: localhost

spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers: account-broker, customer-broker, payment-broker
  kafka:
    bootstrap-servers:
    - localhost:9092
    - localhost:9093
    - localhost:9094
    - localhost:9095

---

spring.config.activate.on-profile: kafka

management.health.binders.enabled: true

spring:
  cloud:
    stream:
      kafka:
        binder:
          auto-add-partitions: true
          auto-create-topics: false
          auto-alter-topics: false
          min-partition-count: 2
          consumer-properties:
            tx-commit-recovered: false
            standard-headers: both
            # TO DO: myCustomErrorHandler in which implements CommonErrorHandler
            common-error-handler-bean-name: org.springframework.cloud.stream.config.ListenerContainerCustomizer
            enable-dlq: true
            dlq-name: errors
            #TO DO: dlqProducerProperties.configuration.key.serializer
            #TO DO: dlqProducerProperties.configuration.value.serializer
          producer-properties:
            ack-mode: all
            closed-timeout: 10
            enable-dlq: true
            dlq-name: errors  
          transaction:
            producer:
              #TO DO: transaction-manager: myCustomTransactionManager using ChainedKafkaTransactionManager
              buffer-size: 10240000
              compression-type: zstd
              message-key-expression: headers.id
              partition-key-expression: headers['partitionKey']
              sync: true
              error-channel-enabled: true
              batch-timeout: 10000
              topic:
                replicas-assignments:
          replication-factor: 4
          brokers:
          - localhost:9092
          - localhost:9093
          - localhost:9094
          - localhost:9095
  kafka:
    listener:
      type: batch
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringSerializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonSerializer
      max-poll-records: 20000
      fetch-min-size: 10240000
      fetch-max-wait: 10000
      security:
        protocol: SASL_SSL
      ssl:
        protocol: TLSv3.0
    producer:
      compression-type: zstd
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      security:
        protocol: SASL_SSL
      ssl:
        protocol: TLSv3.0
    bootstrap-servers:
    - localhost:9092
    - localhost:9093
    - localhost:9094
    - localhost:9095